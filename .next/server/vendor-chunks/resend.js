"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/resend";
exports.ids = ["vendor-chunks/resend"];
exports.modules = {

/***/ "(rsc)/./node_modules/resend/dist/index.mjs":
/*!********************************************!*\
  !*** ./node_modules/resend/dist/index.mjs ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Resend: () => (/* binding */ Resend)\n/* harmony export */ });\n/* harmony import */ var svix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! svix */ \"(rsc)/./node_modules/svix/dist/index.js\");\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\n\n// package.json\nvar version = \"6.3.0\";\n\n// src/common/utils/build-pagination-query.ts\nfunction buildPaginationQuery(options) {\n  const searchParams = new URLSearchParams();\n  if (options.limit !== void 0) {\n    searchParams.set(\"limit\", options.limit.toString());\n  }\n  if (\"after\" in options && options.after !== void 0) {\n    searchParams.set(\"after\", options.after);\n  }\n  if (\"before\" in options && options.before !== void 0) {\n    searchParams.set(\"before\", options.before);\n  }\n  return searchParams.toString();\n}\n\n// src/api-keys/api-keys.ts\nvar ApiKeys = class {\n  constructor(resend) {\n    this.resend = resend;\n  }\n  async create(payload, options = {}) {\n    const data = await this.resend.post(\n      \"/api-keys\",\n      payload,\n      options\n    );\n    return data;\n  }\n  async list(options = {}) {\n    const queryString = buildPaginationQuery(options);\n    const url = queryString ? `/api-keys?${queryString}` : \"/api-keys\";\n    const data = await this.resend.get(url);\n    return data;\n  }\n  async remove(id) {\n    const data = await this.resend.delete(\n      `/api-keys/${id}`\n    );\n    return data;\n  }\n};\n\n// src/audiences/audiences.ts\nvar Audiences = class {\n  constructor(resend) {\n    this.resend = resend;\n  }\n  async create(payload, options = {}) {\n    const data = await this.resend.post(\n      \"/audiences\",\n      payload,\n      options\n    );\n    return data;\n  }\n  async list(options = {}) {\n    const queryString = buildPaginationQuery(options);\n    const url = queryString ? `/audiences?${queryString}` : \"/audiences\";\n    const data = await this.resend.get(url);\n    return data;\n  }\n  async get(id) {\n    const data = await this.resend.get(\n      `/audiences/${id}`\n    );\n    return data;\n  }\n  async remove(id) {\n    const data = await this.resend.delete(\n      `/audiences/${id}`\n    );\n    return data;\n  }\n};\n\n// src/common/utils/parse-email-to-api-options.ts\nfunction parseAttachments(attachments) {\n  return attachments == null ? void 0 : attachments.map((attachment) => ({\n    content: attachment.content,\n    filename: attachment.filename,\n    path: attachment.path,\n    content_type: attachment.contentType,\n    content_id: attachment.contentId\n  }));\n}\nfunction parseEmailToApiOptions(email) {\n  return {\n    attachments: parseAttachments(email.attachments),\n    bcc: email.bcc,\n    cc: email.cc,\n    from: email.from,\n    headers: email.headers,\n    html: email.html,\n    reply_to: email.replyTo,\n    scheduled_at: email.scheduledAt,\n    subject: email.subject,\n    tags: email.tags,\n    text: email.text,\n    to: email.to\n  };\n}\n\n// src/render.ts\nasync function render(node) {\n  let render2;\n  try {\n    ({ render: render2 } = await __webpack_require__.e(/*! import() */ \"_3d4e\").then(__webpack_require__.t.bind(__webpack_require__, /*! @react-email/render */ \"?3d4e\", 19)));\n  } catch (e) {\n    throw new Error(\n      \"Failed to render React component. Make sure to install `@react-email/render` or `@react-email/components`.\"\n    );\n  }\n  return render2(node);\n}\n\n// src/batch/batch.ts\nvar Batch = class {\n  constructor(resend) {\n    this.resend = resend;\n  }\n  async send(payload, options) {\n    return this.create(payload, options);\n  }\n  async create(payload, options) {\n    var _a;\n    const emails = [];\n    for (const email of payload) {\n      if (email.react) {\n        email.html = await render(email.react);\n        email.react = void 0;\n      }\n      emails.push(parseEmailToApiOptions(email));\n    }\n    const data = await this.resend.post(\n      \"/emails/batch\",\n      emails,\n      __spreadProps(__spreadValues({}, options), {\n        headers: __spreadValues({\n          \"x-batch-validation\": (_a = options == null ? void 0 : options.batchValidation) != null ? _a : \"strict\"\n        }, options == null ? void 0 : options.headers)\n      })\n    );\n    return data;\n  }\n};\n\n// src/broadcasts/broadcasts.ts\nvar Broadcasts = class {\n  constructor(resend) {\n    this.resend = resend;\n  }\n  async create(payload, options = {}) {\n    if (payload.react) {\n      payload.html = await render(payload.react);\n    }\n    const data = await this.resend.post(\n      \"/broadcasts\",\n      {\n        name: payload.name,\n        audience_id: payload.audienceId,\n        preview_text: payload.previewText,\n        from: payload.from,\n        html: payload.html,\n        reply_to: payload.replyTo,\n        subject: payload.subject,\n        text: payload.text\n      },\n      options\n    );\n    return data;\n  }\n  async send(id, payload) {\n    const data = await this.resend.post(\n      `/broadcasts/${id}/send`,\n      { scheduled_at: payload == null ? void 0 : payload.scheduledAt }\n    );\n    return data;\n  }\n  async list(options = {}) {\n    const queryString = buildPaginationQuery(options);\n    const url = queryString ? `/broadcasts?${queryString}` : \"/broadcasts\";\n    const data = await this.resend.get(url);\n    return data;\n  }\n  async get(id) {\n    const data = await this.resend.get(\n      `/broadcasts/${id}`\n    );\n    return data;\n  }\n  async remove(id) {\n    const data = await this.resend.delete(\n      `/broadcasts/${id}`\n    );\n    return data;\n  }\n  async update(id, payload) {\n    if (payload.react) {\n      payload.html = await render(payload.react);\n    }\n    const data = await this.resend.patch(\n      `/broadcasts/${id}`,\n      {\n        name: payload.name,\n        audience_id: payload.audienceId,\n        from: payload.from,\n        html: payload.html,\n        text: payload.text,\n        subject: payload.subject,\n        reply_to: payload.replyTo,\n        preview_text: payload.previewText\n      }\n    );\n    return data;\n  }\n};\n\n// src/contacts/contacts.ts\nvar Contacts = class {\n  constructor(resend) {\n    this.resend = resend;\n  }\n  async create(payload, options = {}) {\n    const data = await this.resend.post(\n      `/audiences/${payload.audienceId}/contacts`,\n      {\n        unsubscribed: payload.unsubscribed,\n        email: payload.email,\n        first_name: payload.firstName,\n        last_name: payload.lastName\n      },\n      options\n    );\n    return data;\n  }\n  async list(options) {\n    const _a = options, { audienceId } = _a, paginationOptions = __objRest(_a, [\"audienceId\"]);\n    const queryString = buildPaginationQuery(paginationOptions);\n    const url = queryString ? `/audiences/${audienceId}/contacts?${queryString}` : `/audiences/${audienceId}/contacts`;\n    const data = await this.resend.get(url);\n    return data;\n  }\n  async get(options) {\n    if (!options.id && !options.email) {\n      return {\n        data: null,\n        error: {\n          message: \"Missing `id` or `email` field.\",\n          statusCode: null,\n          name: \"missing_required_field\"\n        }\n      };\n    }\n    const data = await this.resend.get(\n      `/audiences/${options.audienceId}/contacts/${(options == null ? void 0 : options.email) ? options == null ? void 0 : options.email : options == null ? void 0 : options.id}`\n    );\n    return data;\n  }\n  async update(options) {\n    if (!options.id && !options.email) {\n      return {\n        data: null,\n        error: {\n          message: \"Missing `id` or `email` field.\",\n          statusCode: null,\n          name: \"missing_required_field\"\n        }\n      };\n    }\n    const data = await this.resend.patch(\n      `/audiences/${options.audienceId}/contacts/${(options == null ? void 0 : options.email) ? options == null ? void 0 : options.email : options == null ? void 0 : options.id}`,\n      {\n        unsubscribed: options.unsubscribed,\n        first_name: options.firstName,\n        last_name: options.lastName\n      }\n    );\n    return data;\n  }\n  async remove(payload) {\n    if (!payload.id && !payload.email) {\n      return {\n        data: null,\n        error: {\n          message: \"Missing `id` or `email` field.\",\n          statusCode: null,\n          name: \"missing_required_field\"\n        }\n      };\n    }\n    const data = await this.resend.delete(\n      `/audiences/${payload.audienceId}/contacts/${(payload == null ? void 0 : payload.email) ? payload == null ? void 0 : payload.email : payload == null ? void 0 : payload.id}`\n    );\n    return data;\n  }\n};\n\n// src/common/utils/parse-domain-to-api-options.ts\nfunction parseDomainToApiOptions(domain) {\n  return {\n    name: domain.name,\n    region: domain.region,\n    custom_return_path: domain.customReturnPath\n  };\n}\n\n// src/domains/domains.ts\nvar Domains = class {\n  constructor(resend) {\n    this.resend = resend;\n  }\n  async create(payload, options = {}) {\n    const data = await this.resend.post(\n      \"/domains\",\n      parseDomainToApiOptions(payload),\n      options\n    );\n    return data;\n  }\n  async list(options = {}) {\n    const queryString = buildPaginationQuery(options);\n    const url = queryString ? `/domains?${queryString}` : \"/domains\";\n    const data = await this.resend.get(url);\n    return data;\n  }\n  async get(id) {\n    const data = await this.resend.get(\n      `/domains/${id}`\n    );\n    return data;\n  }\n  async update(payload) {\n    const data = await this.resend.patch(\n      `/domains/${payload.id}`,\n      {\n        click_tracking: payload.clickTracking,\n        open_tracking: payload.openTracking,\n        tls: payload.tls\n      }\n    );\n    return data;\n  }\n  async remove(id) {\n    const data = await this.resend.delete(\n      `/domains/${id}`\n    );\n    return data;\n  }\n  async verify(id) {\n    const data = await this.resend.post(\n      `/domains/${id}/verify`\n    );\n    return data;\n  }\n};\n\n// src/emails/emails.ts\nvar Emails = class {\n  constructor(resend) {\n    this.resend = resend;\n  }\n  async send(payload, options = {}) {\n    return this.create(payload, options);\n  }\n  async create(payload, options = {}) {\n    if (payload.react) {\n      payload.html = await render(payload.react);\n    }\n    const data = await this.resend.post(\n      \"/emails\",\n      parseEmailToApiOptions(payload),\n      options\n    );\n    return data;\n  }\n  async get(id) {\n    const data = await this.resend.get(\n      `/emails/${id}`\n    );\n    return data;\n  }\n  async list(options = {}) {\n    const queryString = buildPaginationQuery(options);\n    const url = queryString ? `/emails?${queryString}` : \"/emails\";\n    const data = await this.resend.get(url);\n    return data;\n  }\n  async update(payload) {\n    const data = await this.resend.patch(\n      `/emails/${payload.id}`,\n      {\n        scheduled_at: payload.scheduledAt\n      }\n    );\n    return data;\n  }\n  async cancel(id) {\n    const data = await this.resend.post(\n      `/emails/${id}/cancel`\n    );\n    return data;\n  }\n};\n\n// src/webhooks/webhooks.ts\n\nvar Webhooks = class {\n  constructor(resend) {\n    this.resend = resend;\n  }\n  async create(payload, options = {}) {\n    const data = await this.resend.post(\n      \"/webhooks\",\n      payload,\n      options\n    );\n    return data;\n  }\n  async get(id) {\n    const data = await this.resend.get(\n      `/webhooks/${id}`\n    );\n    return data;\n  }\n  async list(options = {}) {\n    const queryString = buildPaginationQuery(options);\n    const url = queryString ? `/webhooks?${queryString}` : \"/webhooks\";\n    const data = await this.resend.get(url);\n    return data;\n  }\n  async update(id, payload) {\n    const data = await this.resend.patch(\n      `/webhooks/${id}`,\n      payload\n    );\n    return data;\n  }\n  async remove(id) {\n    const data = await this.resend.delete(\n      `/webhooks/${id}`\n    );\n    return data;\n  }\n  verify(payload) {\n    const webhook = new svix__WEBPACK_IMPORTED_MODULE_0__.Webhook(payload.webhookSecret);\n    return webhook.verify(payload.payload, {\n      \"svix-id\": payload.headers.id,\n      \"svix-timestamp\": payload.headers.timestamp,\n      \"svix-signature\": payload.headers.signature\n    });\n  }\n};\n\n// src/resend.ts\nvar defaultBaseUrl = \"https://api.resend.com\";\nvar defaultUserAgent = `resend-node:${version}`;\nvar baseUrl = typeof process !== \"undefined\" && process.env ? process.env.RESEND_BASE_URL || defaultBaseUrl : defaultBaseUrl;\nvar userAgent = typeof process !== \"undefined\" && process.env ? process.env.RESEND_USER_AGENT || defaultUserAgent : defaultUserAgent;\nvar Resend = class {\n  constructor(key) {\n    this.key = key;\n    this.apiKeys = new ApiKeys(this);\n    this.audiences = new Audiences(this);\n    this.batch = new Batch(this);\n    this.broadcasts = new Broadcasts(this);\n    this.contacts = new Contacts(this);\n    this.domains = new Domains(this);\n    this.emails = new Emails(this);\n    this.webhooks = new Webhooks(this);\n    if (!key) {\n      if (typeof process !== \"undefined\" && process.env) {\n        this.key = process.env.RESEND_API_KEY;\n      }\n      if (!this.key) {\n        throw new Error(\n          'Missing API key. Pass it to the constructor `new Resend(\"re_123\")`'\n        );\n      }\n    }\n    this.headers = new Headers({\n      Authorization: `Bearer ${this.key}`,\n      \"User-Agent\": userAgent,\n      \"Content-Type\": \"application/json\"\n    });\n  }\n  async fetchRequest(path, options = {}) {\n    try {\n      const response = await fetch(`${baseUrl}${path}`, options);\n      if (!response.ok) {\n        try {\n          const rawError = await response.text();\n          return { data: null, error: JSON.parse(rawError) };\n        } catch (err) {\n          if (err instanceof SyntaxError) {\n            return {\n              data: null,\n              error: {\n                name: \"application_error\",\n                statusCode: response.status,\n                message: \"Internal server error. We are unable to process your request right now, please try again later.\"\n              }\n            };\n          }\n          const error = {\n            message: response.statusText,\n            statusCode: response.status,\n            name: \"application_error\"\n          };\n          if (err instanceof Error) {\n            return { data: null, error: __spreadProps(__spreadValues({}, error), { message: err.message }) };\n          }\n          return { data: null, error };\n        }\n      }\n      const data = await response.json();\n      return { data, error: null };\n    } catch (e) {\n      return {\n        data: null,\n        error: {\n          name: \"application_error\",\n          statusCode: null,\n          message: \"Unable to fetch data. The request could not be resolved.\"\n        }\n      };\n    }\n  }\n  async post(path, entity, options = {}) {\n    const headers = new Headers(this.headers);\n    if (options.headers) {\n      for (const [key, value] of new Headers(options.headers).entries()) {\n        headers.set(key, value);\n      }\n    }\n    if (options.idempotencyKey) {\n      headers.set(\"Idempotency-Key\", options.idempotencyKey);\n    }\n    const requestOptions = __spreadProps(__spreadValues({\n      method: \"POST\",\n      body: JSON.stringify(entity)\n    }, options), {\n      headers\n    });\n    return this.fetchRequest(path, requestOptions);\n  }\n  async get(path, options = {}) {\n    const headers = new Headers(this.headers);\n    if (options.headers) {\n      for (const [key, value] of new Headers(options.headers).entries()) {\n        headers.set(key, value);\n      }\n    }\n    const requestOptions = __spreadProps(__spreadValues({\n      method: \"GET\"\n    }, options), {\n      headers\n    });\n    return this.fetchRequest(path, requestOptions);\n  }\n  async put(path, entity, options = {}) {\n    const headers = new Headers(this.headers);\n    if (options.headers) {\n      for (const [key, value] of new Headers(options.headers).entries()) {\n        headers.set(key, value);\n      }\n    }\n    const requestOptions = __spreadProps(__spreadValues({\n      method: \"PUT\",\n      body: JSON.stringify(entity)\n    }, options), {\n      headers\n    });\n    return this.fetchRequest(path, requestOptions);\n  }\n  async patch(path, entity, options = {}) {\n    const headers = new Headers(this.headers);\n    if (options.headers) {\n      for (const [key, value] of new Headers(options.headers).entries()) {\n        headers.set(key, value);\n      }\n    }\n    const requestOptions = __spreadProps(__spreadValues({\n      method: \"PATCH\",\n      body: JSON.stringify(entity)\n    }, options), {\n      headers\n    });\n    return this.fetchRequest(path, requestOptions);\n  }\n  async delete(path, query) {\n    const requestOptions = {\n      method: \"DELETE\",\n      body: JSON.stringify(query),\n      headers: this.headers\n    };\n    return this.fetchRequest(path, requestOptions);\n  }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/resend/dist/index.mjs\n");

/***/ })

};
;