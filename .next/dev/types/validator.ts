// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/types.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
}


// Validate ../../../app/admin/aeta/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/admin/aeta">> = Specific
  const handler = {} as typeof import("../../../app/admin/aeta/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../../app/admin/employees/[id]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/admin/employees/[id]">> = Specific
  const handler = {} as typeof import("../../../app/admin/employees/[id]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../../app/admin/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/admin">> = Specific
  const handler = {} as typeof import("../../../app/admin/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../../app/auth/callback/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/auth/callback">> = Specific
  const handler = {} as typeof import("../../../app/auth/callback/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../../app/components/ui/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/components/ui">> = Specific
  const handler = {} as typeof import("../../../app/components/ui/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../../app/customers/new/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/customers/new">> = Specific
  const handler = {} as typeof import("../../../app/customers/new/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../../app/customers/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/customers">> = Specific
  const handler = {} as typeof import("../../../app/customers/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../../app/dashboard/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard">> = Specific
  const handler = {} as typeof import("../../../app/dashboard/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../../app/error/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/error">> = Specific
  const handler = {} as typeof import("../../../app/error/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../../app/invoices/[id]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/invoices/[id]">> = Specific
  const handler = {} as typeof import("../../../app/invoices/[id]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../../app/invoices/new/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/invoices/new">> = Specific
  const handler = {} as typeof import("../../../app/invoices/new/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../../app/invoices/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/invoices">> = Specific
  const handler = {} as typeof import("../../../app/invoices/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../../app/login/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/login">> = Specific
  const handler = {} as typeof import("../../../app/login/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../../app/min-tid/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/min-tid">> = Specific
  const handler = {} as typeof import("../../../app/min-tid/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../../app/onboarding/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/onboarding">> = Specific
  const handler = {} as typeof import("../../../app/onboarding/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../../app/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/">> = Specific
  const handler = {} as typeof import("../../../app/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../../app/payroll/employeeID/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/payroll/employeeID">> = Specific
  const handler = {} as typeof import("../../../app/payroll/employeeID/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../../app/payroll/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/payroll">> = Specific
  const handler = {} as typeof import("../../../app/payroll/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../../app/projects/[id]/invoice/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/projects/[id]/invoice">> = Specific
  const handler = {} as typeof import("../../../app/projects/[id]/invoice/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../../app/projects/[id]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/projects/[id]">> = Specific
  const handler = {} as typeof import("../../../app/projects/[id]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../../app/projects/new/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/projects/new">> = Specific
  const handler = {} as typeof import("../../../app/projects/new/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../../app/projects/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/projects">> = Specific
  const handler = {} as typeof import("../../../app/projects/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../../app/projects/status/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/projects/status">> = Specific
  const handler = {} as typeof import("../../../app/projects/status/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../../app/reports/new/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/reports/new">> = Specific
  const handler = {} as typeof import("../../../app/reports/new/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../../app/tid/ny/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/tid/ny">> = Specific
  const handler = {} as typeof import("../../../app/tid/ny/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../../app/api/auth/set-session/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/auth/set-session">> = Specific
  const handler = {} as typeof import("../../../app/api/auth/set-session/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../../app/api/invoices/[id]/route.tsx
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/invoices/[id]">> = Specific
  const handler = {} as typeof import("../../../app/api/invoices/[id]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../../app/api/invoices/[id]/summarize/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/invoices/[id]/summarize">> = Specific
  const handler = {} as typeof import("../../../app/api/invoices/[id]/summarize/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../../app/api/time-report/offline/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/time-report/offline">> = Specific
  const handler = {} as typeof import("../../../app/api/time-report/offline/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}





// Validate ../../../app/components/ui/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/components/ui">> = Specific
  const handler = {} as typeof import("../../../app/components/ui/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../../app/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/">> = Specific
  const handler = {} as typeof import("../../../app/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}
