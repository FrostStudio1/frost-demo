{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 16, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/app/utils/supabase/middleware.ts"],"sourcesContent":["import { createServerClient } from '@supabase/ssr'\nimport { NextResponse, type NextRequest } from 'next/server'\n\nexport async function updateSession(request: NextRequest) {\n  let response = NextResponse.next({ request })\n\n  const supabase = createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_PUBLISHABLE_KEY!,\n    {\n      cookies: {\n        getAll() {\n          return request.cookies.getAll()\n        },\n        setAll(cookiesToSet) {\n          cookiesToSet.forEach(({ name, value }) => request.cookies.set(name, value))\n          response = NextResponse.next({ request })\n          cookiesToSet.forEach(({ name, value, options }) =>\n            response.cookies.set(name, value, options)\n          )\n        }\n      }\n    }\n  )\n\n  // triggar refresh och synkar cookies om de beh√∂ver uppdateras\n  await supabase.auth.getUser()\n  return response\n}\n"],"names":[],"mappings":";;;;AAAA;AAAA;AACA;AAAA;;;AAEO,eAAe,cAAc,OAAoB;IACtD,IAAI,WAAW,gMAAY,CAAC,IAAI,CAAC;QAAE;IAAQ;IAE3C,MAAM,WAAW,IAAA,uMAAkB,sUAGjC;QACE,SAAS;YACP;gBACE,OAAO,QAAQ,OAAO,CAAC,MAAM;YAC/B;YACA,QAAO,YAAY;gBACjB,aAAa,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,GAAK,QAAQ,OAAO,CAAC,GAAG,CAAC,MAAM;gBACpE,WAAW,gMAAY,CAAC,IAAI,CAAC;oBAAE;gBAAQ;gBACvC,aAAa,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,GAC5C,SAAS,OAAO,CAAC,GAAG,CAAC,MAAM,OAAO;YAEtC;QACF;IACF;IAGF,8DAA8D;IAC9D,MAAM,SAAS,IAAI,CAAC,OAAO;IAC3B,OAAO;AACT"}},
    {"offset": {"line": 52, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/middleware.ts"],"sourcesContent":["import type { NextRequest } from 'next/server'\nimport { updateSession } from './app/utils/supabase/middleware' // <= relativ import till src/\n\nexport async function middleware(request: NextRequest) {\n  return updateSession(request)\n}\n\nexport const config = {\n  matcher: [\n    '/((?!_next/static|_next/image|favicon.ico|.*\\\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',\n  ],\n}\n"],"names":[],"mappings":";;;;;;AACA,2PAAgE,8BAA8B;;AAEvF,eAAe,WAAW,OAAoB;IACnD,OAAO,IAAA,+JAAa,EAAC;AACvB;AAEO,MAAM,SAAS;IACpB,SAAS;QACP;KACD;AACH"}}]
}