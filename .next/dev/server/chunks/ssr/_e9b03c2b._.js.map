{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/vilmerfrost/frost-demo/app/tid/ny/actions.ts"],"sourcesContent":["'use server'\n\nimport { createClient } from '../../utils/supabase/server'\nimport { redirect } from 'next/navigation'\n\nexport async function createTimeEntry(formData: FormData) {\n  const supabase = createClient()\n  const {\n    data: { user },\n    error: userErr,\n  } = await supabase.auth.getUser()\n  if (userErr || !user) {\n    redirect('/login')\n  }\n\n  const project_id = String(formData.get('project_id') || '')\n  const date = String(formData.get('date') || '')\n  const start_time = String(formData.get('start_time') || '')\n  const end_time = String(formData.get('end_time') || '')\n  const break_minutes = Number(formData.get('break_minutes') || 0)\n  const work_type = String(formData.get('work_type') || 'Arbete')\n\n  if (!project_id || !date || !start_time || !end_time) {\n    redirect('/tid/ny?err=' + encodeURIComponent('Fyll i alla obligatoriska fält'))\n  }\n\n  // ISO timestamps, lokal dag + tider\n  const start_at = new Date(`${date}T${start_time}:00`).toISOString()\n  const end_at = new Date(`${date}T${end_time}:00`).toISOString()\n\n  // INSERT – RLS-trigger sätter tenant_id automatiskt\n  const { error: insertErr } = await supabase.from('time_entries').insert([\n    {\n      project_id,\n      start_at,\n      end_at,\n      break_minutes,\n      work_type,\n      user_id: user.id,\n      // Lägg gärna till fler fält om din tabell har dem (t ex employee_id, notes osv)\n    },\n  ])\n\n  if (insertErr) {\n    redirect('/tid/ny?err=' + encodeURIComponent(insertErr.message))\n  }\n\n  // Tillbaka till projektlistan efter lyckad sparning\n  redirect('/projects?created=1')\n}\n"],"names":[],"mappings":";;;;;AAEA;AACA;AAAA;;;;;AAEO,eAAe,gBAAgB,QAAkB;IACtD,MAAM,WAAW,IAAA,kJAAY;IAC7B,MAAM,EACJ,MAAM,EAAE,IAAI,EAAE,EACd,OAAO,OAAO,EACf,GAAG,MAAM,SAAS,IAAI,CAAC,OAAO;IAC/B,IAAI,WAAW,CAAC,MAAM;QACpB,IAAA,iMAAQ,EAAC;IACX;IAEA,MAAM,aAAa,OAAO,SAAS,GAAG,CAAC,iBAAiB;IACxD,MAAM,OAAO,OAAO,SAAS,GAAG,CAAC,WAAW;IAC5C,MAAM,aAAa,OAAO,SAAS,GAAG,CAAC,iBAAiB;IACxD,MAAM,WAAW,OAAO,SAAS,GAAG,CAAC,eAAe;IACpD,MAAM,gBAAgB,OAAO,SAAS,GAAG,CAAC,oBAAoB;IAC9D,MAAM,YAAY,OAAO,SAAS,GAAG,CAAC,gBAAgB;IAEtD,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,cAAc,CAAC,UAAU;QACpD,IAAA,iMAAQ,EAAC,iBAAiB,mBAAmB;IAC/C;IAEA,oCAAoC;IACpC,MAAM,WAAW,IAAI,KAAK,GAAG,KAAK,CAAC,EAAE,WAAW,GAAG,CAAC,EAAE,WAAW;IACjE,MAAM,SAAS,IAAI,KAAK,GAAG,KAAK,CAAC,EAAE,SAAS,GAAG,CAAC,EAAE,WAAW;IAE7D,oDAAoD;IACpD,MAAM,EAAE,OAAO,SAAS,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,gBAAgB,MAAM,CAAC;QACtE;YACE;YACA;YACA;YACA;YACA;YACA,SAAS,KAAK,EAAE;QAElB;KACD;IAED,IAAI,WAAW;QACb,IAAA,iMAAQ,EAAC,iBAAiB,mBAAmB,UAAU,OAAO;IAChE;IAEA,oDAAoD;IACpD,IAAA,iMAAQ,EAAC;AACX;;;IA5CsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///Users/vilmerfrost/frost-demo/.next-internal/server/app/tid/ny/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {signOut as '0037d1b4c6fcb424e7c16062aeabd7cee739ff8680'} from 'ACTIONS_MODULE0'\nexport {sendMagicLink as '40c061ff68462f6d9579e14509518067fbcf3ba35a'} from 'ACTIONS_MODULE0'\nexport {createTimeEntry as '409e7b9f02c7954c927d543f3eea601788bbcb8082'} from 'ACTIONS_MODULE1'\n"],"names":[],"mappings":";AAAA;AAEA","debugId":null}}]
}